name: Publish Specific Python Package

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish (e.g., core, api, redis, etc.)'
        required: true
        type: string

jobs:
  build-and-publish:
    name: Build and Publish Specific Python Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12.10']
    permissions:
      contents: read
      id-token: write  # For PyPI trusted publishing

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Validate package name
        run: |
          # Source the modules.sh file to get the MODULES variable
          source scripts/modules.sh

          # Check if the provided package name is in the MODULES list
          if ! echo "$MODULES" | grep -w "${{ github.event.inputs.package }}" > /dev/null; then
            echo "Error: Package '${{ github.event.inputs.package }}' is not valid."
            echo "Valid packages are: $MODULES"
            exit 1
          fi

          echo "Package '${{ github.event.inputs.package }}' is valid."

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          plugins: |
            poetry-plugin-mono-repo-deps@0.3.2

      - name: Build specific package
        run: |
          # Change to the package directory
          cd ${{ github.event.inputs.package }}

          # Install dependencies and build package
          poetry install --without dev
          poetry build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ github.event.inputs.package }}/dist/
          skip-existing: true
          verbose: true
